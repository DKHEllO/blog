<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>KK</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2017-10-16T18:35:21+08:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>Ubuntu下搭建jekyll</title>
   <link href="http://localhost:4000/2017/10/16/jekyll-build/"/>
   <updated>2017-10-16T00:00:00+08:00</updated>
   <id>http://localhost:4000/2017/10/16/jekyll-build</id>
   <content type="html">&lt;h2 id=&quot;jekyll&quot;&gt;jekyll&lt;/h2&gt;
&lt;h3 id=&quot;jekyll是什么&quot;&gt;jekyll是什么&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://jekyll.com.cn&quot;&gt;jekyll中文文档&lt;/a&gt;这样描述:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Jekyll 是一个简单的博客形态的静态站点生产机器。它有一个模版目录，其中包含原始文本格式的文档，通过Markdown(或者Textile)以及Liquid转化成一个完整的可发布的静态网站，你可以发布在任何你喜爱的服务器上。Jekyll也可以运行在GitHub Page上，也就是说，你可以使用GitHub的服务来搭建你的项目页面、博客或者网站，而且是完全免费的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;jekyll的几个优点&quot;&gt;jekyll的几个优点&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;简单
无需数据库、评论功能，不需要不断的更新版本，只用关心你的博客内容。&lt;/li&gt;
  &lt;li&gt;静态
只用 Markdown(或Textile)、Liquid、HTML&amp;amp;CSS就可以构建可部署的静态网站。&lt;/li&gt;
  &lt;li&gt;博客形态
自定义地址、分类、页面、博客内容 以及 自定义的布局设计 都是系统中的一等公民。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jekyll的安装&quot;&gt;jekyll的安装&lt;/h3&gt;
&lt;p&gt;jekyll安装需要以下环境&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ruby&lt;/li&gt;
  &lt;li&gt;RubGems&lt;/li&gt;
  &lt;li&gt;Linux,Unix or MacOS X&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ruby-lang.org/en/documentation/installation/&quot;&gt;Ruby&lt;/a&gt;的安装，这里以Debian,Ubuntu为例:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install ruby-full
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后安装jekyll&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install jekyll
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样jeykll的安装就已经完成了&lt;/p&gt;

&lt;h3 id=&quot;jekyll的运行&quot;&gt;jekyll的运行&lt;/h3&gt;
&lt;p&gt;安装了Jekyll的Gem包之后，就可以在命令行中使用Jekyll命令了。有以下这些用法：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ jekyll build
# =&amp;gt; 当前文件夹中的内容将会生成到 ./site 文件夹中。

$ jekyll build --destination &amp;lt;destination&amp;gt;
# =&amp;gt; 当前文件夹中的内容将会生成到目标文件夹&amp;lt;destination&amp;gt;中。

$ jekyll build --source &amp;lt;source&amp;gt; --destination &amp;lt;destination&amp;gt;
# =&amp;gt; 指定源文件夹&amp;lt;source&amp;gt;中的内容将会生成到目标文件夹&amp;lt;destination&amp;gt;中。

$ jekyll build --watch
# =&amp;gt; 当前文件夹中的内容将会生成到 ./site 文件夹中，
#    查看改变，并且自动再生成
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Jekyll 同时也集成了一个开发用的服务器，可以让你使用浏览器在本地进行预览。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll serve
# =&amp;gt; 一个开发服务器将会运行在 http://localhost:4000/

$ jekyll serve --detach
# =&amp;gt; 功能和`jekyll serve`命令相同，但是会脱离终端在后台运行。
#    如果你想关闭服务器，可以使用`kill -9 1234`命令，&quot;1234&quot; 是进程号（PID）。
#    如果你找不到进程号，那么就用`ps aux | grep jekyll`命令来查看，然后关闭服务器。[更多](http://unixhelp.ed.ac.uk/shell/jobz5.html).

$ jekyll serve --watch
# =&amp;gt; 和`jekyll serve`相同，但是会查看变更并且自动再生成。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;还有一些可以配置的配置选项. 很多配置选项既可以在命令行中作为标识(flags)设定，也可以在源文件根目录中的 _config.yml 文件中进行设定。Jekyll 会自动加载这些配置。比如你在你的 _config.yml 文件中添加了下面几行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source:      _source
destination: _deploy
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;那么就等价于执行了以下两条命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ jekyll build
$ jekyll build --source _source --destination _deploy
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;部署方法&quot;&gt;部署方法&lt;/h2&gt;

&lt;h3 id=&quot;github-pages&quot;&gt;GitHub Pages&lt;/h3&gt;

&lt;p&gt;Github Pages 是面向用户、组织和项目开放的公共静态页面搭建托管服 务，站点可以被免费托管在 Github 上，你可以选择使用 Github Pages 默 认提供的域名 github.io 或者自定义域名来发布站点。Github Pages 支持 自动利用 Jekyll 生成站点，也同样支持纯 HTML 文档，将你的 Jekyll 站 点托管在 Github Pages 上是一个不错的选择。&lt;/p&gt;

&lt;p&gt;Github Pages 依靠 Github 上项目的某些特定分支来工作。Github Pages 分为两种基本类型：用户/组织的站点和项目的站点。搭建这两种类型站 点的方法除了一小些细节之外基本一致。&lt;/p&gt;

&lt;p&gt;用户和组织的站点被放置在一个特殊的专用仓库中，在该仓库中只存在 Github Pages 的相关文件。这个仓库应该根据用户/组织的名称来命名， 例如： @mojombo 的用户站点仓库 应该被命名为 mojombo.github.io 。&lt;/p&gt;

&lt;p&gt;仓库中master分支里的文件将会被用来生成 Github Pages 站点，所以请 确保你的文件储存在该分支上。&lt;/p&gt;

&lt;p&gt;详细见&lt;a href=&quot;http://jekyll.com.cn/docs/github-pages/&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;服务器部署&quot;&gt;服务器部署&lt;/h3&gt;

&lt;p&gt;部署在自己的服务器上，首先需要安装上面jekyll运运行的环境，然后将&lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt;文件夹&lt;code class=&quot;highlighter-rouge&quot;&gt;scp&lt;/code&gt;到服务器上，运行&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve &amp;amp;&lt;/code&gt;命令即可&lt;/p&gt;

&lt;h2 id=&quot;遇到的坑&quot;&gt;遇到的坑&lt;/h2&gt;

&lt;p&gt;出现下面报错需要在&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;添加一行&lt;code class=&quot;highlighter-rouge&quot;&gt;plugins: [jekyll-paginate]&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Deprecation: You appear to have pagination turned on, but you haven't included the `jekyll-paginate` gem. Ensure you have `plugins: [jekyll-paginate]` in your configuration file.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;出现下面的报错需要在&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;中将&lt;code class=&quot;highlighter-rouge&quot;&gt;relative_permalinks: true&lt;/code&gt;这一行注释掉&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Since v3.0, permalinks for pages in subfolders must be relative to the site source directory, not the parent directory. Check https://jekyllrb.com/docs/upgrading/ for more info.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Test</title>
   <link href="http://localhost:4000/2017/10/15/Test/"/>
   <updated>2017-10-15T00:00:00+08:00</updated>
   <id>http://localhost:4000/2017/10/15/Test</id>
   <content type="html">&lt;p&gt;Just Test!&lt;/p&gt;
</content>
 </entry>
 

</feed>
